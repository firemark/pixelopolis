#pragma once

// computed values of function cos(atan2(1, x))
// and sin(atan2(1, x))

// python code to generate
// from math import cos, atan2
// arr = [cos(atan2(x / 255, 1)) for x in range(255)]
// print(",\n".join(f"    {a:0.6f}f" for a in arr))
const float COS_ATAN[255] = {
    1.000000f, 0.999992f, 0.999969f, 0.999931f, 0.999877f, 0.999808f, 0.999723f, 0.999623f,
    0.999508f, 0.999378f, 0.999232f, 0.999071f, 0.998895f, 0.998703f, 0.998496f, 0.998274f,
    0.998037f, 0.997785f, 0.997518f, 0.997236f, 0.996938f, 0.996626f, 0.996299f, 0.995957f,
    0.995600f, 0.995229f, 0.994842f, 0.994441f, 0.994026f, 0.993595f, 0.993151f, 0.992691f,
    0.992218f, 0.991730f, 0.991228f, 0.990712f, 0.990181f, 0.989637f, 0.989078f, 0.988506f,
    0.987920f, 0.987320f, 0.986706f, 0.986079f, 0.985438f, 0.984784f, 0.984116f, 0.983435f,
    0.982741f, 0.982034f, 0.981314f, 0.980581f, 0.979835f, 0.979076f, 0.978305f, 0.977521f,
    0.976725f, 0.975916f, 0.975095f, 0.974262f, 0.973417f, 0.972560f, 0.971691f, 0.970811f,
    0.969918f, 0.969015f, 0.968099f, 0.967173f, 0.966235f, 0.965286f, 0.964326f, 0.963355f,
    0.962374f, 0.961382f, 0.960379f, 0.959366f, 0.958342f, 0.957308f, 0.956264f, 0.955210f,
    0.954146f, 0.953073f, 0.951990f, 0.950897f, 0.949795f, 0.948683f, 0.947563f, 0.946433f,
    0.945294f, 0.944147f, 0.942990f, 0.941825f, 0.940652f, 0.939470f, 0.938280f, 0.937082f,
    0.935876f, 0.934662f, 0.933440f, 0.932210f, 0.930973f, 0.929729f, 0.928477f, 0.927218f,
    0.925951f, 0.924678f, 0.923398f, 0.922111f, 0.920818f, 0.919518f, 0.918211f, 0.916898f,
    0.915580f, 0.914255f, 0.912924f, 0.911587f, 0.910244f, 0.908896f, 0.907542f, 0.906183f,
    0.904819f, 0.903449f, 0.902074f, 0.900695f, 0.899310f, 0.897921f, 0.896527f, 0.895128f,
    0.893725f, 0.892318f, 0.890906f, 0.889490f, 0.888071f, 0.886647f, 0.885219f, 0.883788f,
    0.882353f, 0.880914f, 0.879472f, 0.878027f, 0.876579f, 0.875127f, 0.873672f, 0.872214f,
    0.870754f, 0.869290f, 0.867824f, 0.866355f, 0.864884f, 0.863410f, 0.861934f, 0.860456f,
    0.858975f, 0.857493f, 0.856008f, 0.854522f, 0.853034f, 0.851544f, 0.850052f, 0.848559f,
    0.847064f, 0.845568f, 0.844070f, 0.842571f, 0.841071f, 0.839570f, 0.838068f, 0.836565f,
    0.835061f, 0.833556f, 0.832050f, 0.830544f, 0.829037f, 0.827530f, 0.826022f, 0.824513f,
    0.823005f, 0.821496f, 0.819987f, 0.818477f, 0.816968f, 0.815458f, 0.813949f, 0.812440f,
    0.810931f, 0.809422f, 0.807913f, 0.806405f, 0.804897f, 0.803390f, 0.801883f, 0.800376f,
    0.798871f, 0.797366f, 0.795861f, 0.794358f, 0.792855f, 0.791353f, 0.789852f, 0.788352f,
    0.786853f, 0.785356f, 0.783859f, 0.782363f, 0.780869f, 0.779376f, 0.777884f, 0.776393f,
    0.774904f, 0.773416f, 0.771930f, 0.770445f, 0.768962f, 0.767481f, 0.766001f, 0.764522f,
    0.763046f, 0.761571f, 0.760098f, 0.758626f, 0.757157f, 0.755689f, 0.754223f, 0.752760f,
    0.751298f, 0.749838f, 0.748380f, 0.746924f, 0.745471f, 0.744019f, 0.742570f, 0.741123f,
    0.739678f, 0.738235f, 0.736794f, 0.735356f, 0.733920f, 0.732486f, 0.731055f, 0.729626f,
    0.728200f, 0.726776f, 0.725354f, 0.723935f, 0.722519f, 0.721105f, 0.719693f, 0.718284f,
    0.716878f, 0.715474f, 0.714073f, 0.712674f, 0.711278f, 0.709885f, 0.708495f};

// python code to generate
// from math import sin, atan2
// arr = [sin(atan2(x / 255, 1)) for x in range(255)]
// print(",\n".join(f"    {a:0.6f}f" for a in arr))
const float SIN_ATAN[255] = {
    0.000000f, 0.003922f, 0.007843f, 0.011764f, 0.015684f, 0.019604f, 0.023523f, 0.027441f,
    0.031357f, 0.035272f, 0.039186f, 0.043097f, 0.047007f, 0.050914f, 0.054819f, 0.058722f,
    0.062622f, 0.066519f, 0.070413f, 0.074304f, 0.078191f, 0.082075f, 0.085955f, 0.089831f,
    0.093704f, 0.097571f, 0.101435f, 0.105294f, 0.109148f, 0.112997f, 0.116841f, 0.120680f,
    0.124514f, 0.128342f, 0.132164f, 0.135980f, 0.139790f, 0.143594f, 0.147392f, 0.151183f,
    0.154968f, 0.158745f, 0.162516f, 0.166280f, 0.170036f, 0.173785f, 0.177527f, 0.181261f,
    0.184987f, 0.188705f, 0.192414f, 0.196116f, 0.199809f, 0.203494f, 0.207170f, 0.210838f,
    0.214496f, 0.218146f, 0.221786f, 0.225418f, 0.229039f, 0.232652f, 0.236254f, 0.239847f,
    0.243430f, 0.247004f, 0.250567f, 0.254120f, 0.257663f, 0.261195f, 0.264717f, 0.268228f,
    0.271729f, 0.275219f, 0.278698f, 0.282166f, 0.285623f, 0.289070f, 0.292504f, 0.295928f,
    0.299340f, 0.302741f, 0.306130f, 0.309508f, 0.312874f, 0.316228f, 0.319570f, 0.322901f,
    0.326219f, 0.329526f, 0.332820f, 0.336102f, 0.339373f, 0.342630f, 0.345876f, 0.349109f,
    0.352330f, 0.355538f, 0.358734f, 0.361917f, 0.365088f, 0.368245f, 0.371391f, 0.374523f,
    0.377643f, 0.380750f, 0.383844f, 0.386925f, 0.389993f, 0.393049f, 0.396091f, 0.399121f,
    0.402137f, 0.405140f, 0.408131f, 0.411108f, 0.414072f, 0.417023f, 0.419961f, 0.422885f,
    0.425797f, 0.428695f, 0.431581f, 0.434453f, 0.437312f, 0.440157f, 0.442990f, 0.445809f,
    0.448615f, 0.451408f, 0.454187f, 0.456954f, 0.459707f, 0.462447f, 0.465174f, 0.467888f,
    0.470588f, 0.473276f, 0.475950f, 0.478611f, 0.481259f, 0.483894f, 0.486515f, 0.489124f,
    0.491720f, 0.494302f, 0.496872f, 0.499428f, 0.501972f, 0.504502f, 0.507020f, 0.509525f,
    0.512017f, 0.514496f, 0.516962f, 0.519415f, 0.521856f, 0.524284f, 0.526699f, 0.529101f,
    0.531491f, 0.533868f, 0.536233f, 0.538585f, 0.540924f, 0.543251f, 0.545566f, 0.547868f,
    0.550158f, 0.552435f, 0.554700f, 0.556953f, 0.559194f, 0.561422f, 0.563638f, 0.565842f,
    0.568035f, 0.570215f, 0.572383f, 0.574539f, 0.576683f, 0.578816f, 0.580936f, 0.583045f,
    0.585142f, 0.587228f, 0.589301f, 0.591364f, 0.593414f, 0.595454f, 0.597481f, 0.599498f,
    0.601503f, 0.603496f, 0.605479f, 0.607450f, 0.609410f, 0.611359f, 0.613297f, 0.615224f,
    0.617140f, 0.619045f, 0.620939f, 0.622822f, 0.624695f, 0.626557f, 0.628408f, 0.630249f,
    0.632079f, 0.633898f, 0.635707f, 0.637506f, 0.639294f, 0.641072f, 0.642840f, 0.644597f,
    0.646345f, 0.648082f, 0.649809f, 0.651526f, 0.653233f, 0.654931f, 0.656618f, 0.658296f,
    0.659963f, 0.661622f, 0.663270f, 0.664909f, 0.666538f, 0.668158f, 0.669769f, 0.671370f,
    0.672961f, 0.674544f, 0.676117f, 0.677681f, 0.679236f, 0.680782f, 0.682318f, 0.683846f,
    0.685365f, 0.686875f, 0.688376f, 0.689868f, 0.691351f, 0.692826f, 0.694292f, 0.695750f,
    0.697199f, 0.698639f, 0.700071f, 0.701495f, 0.702910f, 0.704317f, 0.705716f};
